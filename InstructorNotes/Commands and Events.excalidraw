{
  "type": "excalidraw",
  "version": 2,
  "source": "https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor",
  "elements": [
    {
      "type": "rectangle",
      "version": 50,
      "versionNonce": 698932334,
      "isDeleted": false,
      "id": "iUApGzdPyHm0xwcVitqwr",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 245.82723999023438,
      "y": -25.13634490966797,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e5ff00",
      "width": 456,
      "height": 133,
      "seed": 1561224622,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [
        {
          "type": "text",
          "id": "UIH9oACN0rk4iUj59tQFl"
        }
      ],
      "updated": 1697543056402,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 32,
      "versionNonce": 1942007730,
      "isDeleted": false,
      "id": "UIH9oACN0rk4iUj59tQFl",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 426.9522399902344,
      "y": 29.36365509033203,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "width": 93.75,
      "height": 24,
      "seed": 1037139950,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1697543056402,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "Commands",
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "iUApGzdPyHm0xwcVitqwr",
      "originalText": "Commands",
      "lineHeight": 1.2,
      "baseline": 20
    },
    {
      "type": "rectangle",
      "version": 83,
      "versionNonce": 1802139566,
      "isDeleted": false,
      "id": "pk7_S7lYlIt0IPCatlqyk",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 833.8272399902344,
      "y": -25.13634490966797,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#0085ff",
      "width": 456,
      "height": 133,
      "seed": 832452846,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [
        {
          "type": "text",
          "id": "177c8jvWGoHEv4qXATiZ-"
        }
      ],
      "updated": 1697543065359,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 82,
      "versionNonce": 1270972530,
      "isDeleted": false,
      "id": "177c8jvWGoHEv4qXATiZ-",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 1026.6709899902344,
      "y": 29.36365509033203,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "width": 70.3125,
      "height": 24,
      "seed": 1870981934,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1697543065359,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "Events",
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "pk7_S7lYlIt0IPCatlqyk",
      "originalText": "Events",
      "lineHeight": 1.2,
      "baseline": 20
    },
    {
      "type": "text",
      "version": 205,
      "versionNonce": 1641293939,
      "isDeleted": false,
      "id": "LMyqKhEW3KdJOgmZXu-KO",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 239.82723999023438,
      "y": 160.86365509033203,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "width": 492.1875,
      "height": 192,
      "seed": 1181871278,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1697551547328,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "Have 1+ Creators and 1 Handler\nAre \"Active Aggressive\" - expect something\nto happen.\n\n- CreateOrder\n- DeactivateAccount\n- PostScore\n",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Have 1+ Creators and 1 Handler\nAre \"Active Aggressive\" - expect something\nto happen.\n\n- CreateOrder\n- DeactivateAccount\n- PostScore\n",
      "lineHeight": 1.2,
      "baseline": 187
    },
    {
      "type": "text",
      "version": 189,
      "versionNonce": 1932987453,
      "isDeleted": false,
      "id": "F9M9jLeoRlGPQVWeqkAmH",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 870.8272399902344,
      "y": 152.86365509033203,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "width": 562.5,
      "height": 192,
      "seed": 110664878,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1697551547329,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "Have 1+ Creators and 0+ Handler\nAre \"Passive\"\nIndicate something happened.\nAn event is something that happened in the past.\n\n- OrderCreated\n- AccountDeactivated\n- ScorePosted",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Have 1+ Creators and 0+ Handler\nAre \"Passive\"\nIndicate something happened.\nAn event is something that happened in the past.\n\n- OrderCreated\n- AccountDeactivated\n- ScorePosted",
      "lineHeight": 1.2,
      "baseline": 187
    },
    {
      "type": "text",
      "version": 570,
      "versionNonce": 838293331,
      "isDeleted": false,
      "id": "SXEihtSNv9KFI_OuqSehV",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 210.82723999023438,
      "y": 468.86365509033203,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e5ff00",
      "width": 1429.6875,
      "height": 168,
      "seed": 132796082,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1697552694318,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "Commands are cause and effect. When we issue a command we are saying that something must happen. We indicate what happened\nby creating an event.\n    - CreateOrder => (OrderCreated | OrderCreationFailed)\n    - The assumption is this will be done asynchronously.\n    - If the command is created from an Request/Reply world, like HTTP, you have nothing to return.\n        - POST /orders -> CreateOrder -> OrderCreated -> 200 Ok?\n        - POST /orders -> CreateOrder -> (OrderConfirmation, OrderCreated) -> 200 Ok (Order)",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Commands are cause and effect. When we issue a command we are saying that something must happen. We indicate what happened\nby creating an event.\n    - CreateOrder => (OrderCreated | OrderCreationFailed)\n    - The assumption is this will be done asynchronously.\n    - If the command is created from an Request/Reply world, like HTTP, you have nothing to return.\n        - POST /orders -> CreateOrder -> OrderCreated -> 200 Ok?\n        - POST /orders -> CreateOrder -> (OrderConfirmation, OrderCreated) -> 200 Ok (Order)",
      "lineHeight": 1.2,
      "baseline": 163
    },
    {
      "type": "rectangle",
      "version": 118,
      "versionNonce": 1680642547,
      "isDeleted": false,
      "id": "8-BL7s0pmn_NYO8aoElhs",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 40.827239990234375,
      "y": 743.863655090332,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e5ff00",
      "width": 456,
      "height": 133,
      "seed": 1237335790,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [
        {
          "type": "text",
          "id": "j6yaOpmME0XkxwkrrPOTx"
        }
      ],
      "updated": 1697553288120,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 111,
      "versionNonce": 122411923,
      "isDeleted": false,
      "id": "j6yaOpmME0XkxwkrrPOTx",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 204.37411499023438,
      "y": 798.363655090332,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "width": 128.90625,
      "height": 24,
      "seed": 24523054,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1697553288120,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "CreateOrder",
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "8-BL7s0pmn_NYO8aoElhs",
      "originalText": "CreateOrder",
      "lineHeight": 1.2,
      "baseline": 20
    },
    {
      "type": "rectangle",
      "version": 143,
      "versionNonce": 1192292659,
      "isDeleted": false,
      "id": "VI6BGO8wvz7mc00IfUi0f",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 1163.8272399902344,
      "y": 735.863655090332,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#0085ff",
      "width": 456,
      "height": 133,
      "seed": 1014780594,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [
        {
          "type": "text",
          "id": "sNyWTZ--2-lSfJ7nkR8m9"
        }
      ],
      "updated": 1697553288120,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 154,
      "versionNonce": 618812115,
      "isDeleted": false,
      "id": "sNyWTZ--2-lSfJ7nkR8m9",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 1321.5147399902344,
      "y": 790.363655090332,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "width": 140.625,
      "height": 24,
      "seed": 1585654898,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1697553288120,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "OrderCreated",
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "VI6BGO8wvz7mc00IfUi0f",
      "originalText": "OrderCreated",
      "lineHeight": 1.2,
      "baseline": 20
    },
    {
      "type": "rectangle",
      "version": 166,
      "versionNonce": 827752563,
      "isDeleted": false,
      "id": "XGVexNHCunEQnarmPlA7L",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 587.8272399902344,
      "y": 740.863655090332,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#c773c7",
      "width": 456,
      "height": 133,
      "seed": 868246190,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [
        {
          "type": "text",
          "id": "rwsJFJGkjsrSXwJxQVurQ"
        }
      ],
      "updated": 1697553288120,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 173,
      "versionNonce": 640940563,
      "isDeleted": false,
      "id": "rwsJFJGkjsrSXwJxQVurQ",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 768.9522399902344,
      "y": 795.363655090332,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "width": 93.75,
      "height": 24,
      "seed": 1195105518,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1697553288120,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "Policies",
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "XGVexNHCunEQnarmPlA7L",
      "originalText": "Policies",
      "lineHeight": 1.2,
      "baseline": 20
    },
    {
      "type": "text",
      "version": 142,
      "versionNonce": 677674141,
      "isDeleted": false,
      "id": "BFGE59w8209kusUjty6Ct",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 676.8272399902344,
      "y": 898.863655090332,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#c773c7",
      "width": 328.125,
      "height": 120,
      "seed": 1209541806,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1697551547334,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "The \"Business Rules\"\n- Customer Has Good Standing\n- Items in Inventory\n- We ship to that location\n- etc.",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "The \"Business Rules\"\n- Customer Has Good Standing\n- Items in Inventory\n- We ship to that location\n- etc.",
      "lineHeight": 1.2,
      "baseline": 115
    },
    {
      "type": "rectangle",
      "version": 165,
      "versionNonce": 733624626,
      "isDeleted": false,
      "id": "K6UCuqv_u5YCfp3kxJZk3",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 1168.8272399902344,
      "y": 901.863655090332,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#0085ff",
      "width": 456,
      "height": 133,
      "seed": 1932847662,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [
        {
          "type": "text",
          "id": "nXq_gR9OqLTjP40tzPZz1"
        }
      ],
      "updated": 1697543214678,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 192,
      "versionNonce": 1288073394,
      "isDeleted": false,
      "id": "nXq_gR9OqLTjP40tzPZz1",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 1320.6553649902344,
      "y": 956.363655090332,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "width": 152.34375,
      "height": 24,
      "seed": 1711982318,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1697543221238,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "OrderRejected",
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "K6UCuqv_u5YCfp3kxJZk3",
      "originalText": "OrderRejected",
      "lineHeight": 1.2,
      "baseline": 20
    },
    {
      "type": "text",
      "version": 168,
      "versionNonce": 1537533875,
      "isDeleted": false,
      "id": "xcoHbZYnOZshtEduAZETJ",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 130.82723999023438,
      "y": 1129.863655090332,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#c773c7",
      "width": 1371.09375,
      "height": 24,
      "seed": 1880669426,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1697551547335,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "Good Practice - Whenever a command is processed always create an event. Even if you don't have a use case for it yet.",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Good Practice - Whenever a command is processed always create an event. Even if you don't have a use case for it yet.",
      "lineHeight": 1.2,
      "baseline": 19
    },
    {
      "type": "text",
      "version": 79,
      "versionNonce": 1262805245,
      "isDeleted": false,
      "id": "qAn-MbiO5iZkZngXUwPiJ",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 234.82723999023438,
      "y": -255.73634490966796,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#c773c7",
      "width": 536.71875,
      "height": 137.40799999999987,
      "seed": 452236846,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1697551547338,
      "link": null,
      "locked": false,
      "fontSize": 114.50666666666656,
      "fontFamily": 3,
      "text": "Messages",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Messages",
      "lineHeight": 1.2,
      "baseline": 110
    },
    {
      "type": "text",
      "version": 262,
      "versionNonce": 548632915,
      "isDeleted": false,
      "id": "JNWEz8fW6efHtTZNhPUTX",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 247.82723999023438,
      "y": -106.53634490966797,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#c773c7",
      "width": 1617.1875,
      "height": 24,
      "seed": 956281650,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1697551547339,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "Let's bracket the thought of external systems for a while. A good way to learn that stuff is applying this internally in your application.",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Let's bracket the thought of external systems for a while. A good way to learn that stuff is applying this internally in your application.",
      "lineHeight": 1.2,
      "baseline": 19
    },
    {
      "type": "text",
      "version": 1800,
      "versionNonce": 291092829,
      "isDeleted": false,
      "id": "aZTPgNQfG5pZzaZXTjOLr",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 129.82723999023438,
      "y": 1268.863655090332,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#c773c7",
      "width": 1464.84375,
      "height": 600,
      "seed": 1054007410,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1697551547343,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "Messages are \"operators\" - They indicate what action to perform (with commands) or what happened (Events).\nMessages often need \"operands\" - what that operator (operation) should be performed on.\n    - In the expression \"2 + 5\", The plus sign (Addition Operator) needs two Operands (2 and 5)\n\nThe operands are \"discovered\" by looking at the policies. Once the policies are applied, we can decide the event.\n\nFor example, with the policies above (Customer has good standing, items in inventory, we ship to that location)\nwe are saying our system has the ability to enforce each of those policies, and if they all \"pass\" we can say OrderCreated.\n\nIf our system doesn't have the stuff (state-process) to enforce those, we could:\n    - Do synchronous RPC calls to the services that can enforce those.\n        - e.g. Check the \"Customer\" service, Check the \"Inventory Service\", Check \"Shipping Service\"\n            - \"Yes, good customer, yes, we have that in inventory, yes we ship there\"\n                We could then say \"Ok, looks good\", now I'm going to send a Command to each of those to:\n                    - Charge the Customer \n                    - Adjust Inventory\n                    - Arrange Shipping\n        - We are back in Distributed Transaction land, and you are going to fail. Hard.\n    - Instead we lean in to \"OrderCreated\" - this isn't the final step. Things need to happen, it needs to be processed, etc.\n        - In other words, it isn't an \"OrderShipped\" event.\n    - An Event is a historical record. You are saying \"At the time this command was received:\n        - I was dealing with this customer (operand)\n        - I was dealing with this list of products (operand)\n\n",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Messages are \"operators\" - They indicate what action to perform (with commands) or what happened (Events).\nMessages often need \"operands\" - what that operator (operation) should be performed on.\n    - In the expression \"2 + 5\", The plus sign (Addition Operator) needs two Operands (2 and 5)\n\nThe operands are \"discovered\" by looking at the policies. Once the policies are applied, we can decide the event.\n\nFor example, with the policies above (Customer has good standing, items in inventory, we ship to that location)\nwe are saying our system has the ability to enforce each of those policies, and if they all \"pass\" we can say OrderCreated.\n\nIf our system doesn't have the stuff (state-process) to enforce those, we could:\n    - Do synchronous RPC calls to the services that can enforce those.\n        - e.g. Check the \"Customer\" service, Check the \"Inventory Service\", Check \"Shipping Service\"\n            - \"Yes, good customer, yes, we have that in inventory, yes we ship there\"\n                We could then say \"Ok, looks good\", now I'm going to send a Command to each of those to:\n                    - Charge the Customer \n                    - Adjust Inventory\n                    - Arrange Shipping\n        - We are back in Distributed Transaction land, and you are going to fail. Hard.\n    - Instead we lean in to \"OrderCreated\" - this isn't the final step. Things need to happen, it needs to be processed, etc.\n        - In other words, it isn't an \"OrderShipped\" event.\n    - An Event is a historical record. You are saying \"At the time this command was received:\n        - I was dealing with this customer (operand)\n        - I was dealing with this list of products (operand)\n\n",
      "lineHeight": 1.2,
      "baseline": 595
    },
    {
      "type": "text",
      "version": 73,
      "versionNonce": 356439795,
      "isDeleted": false,
      "id": "-TzYMXUamLWwbManC_OUi",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": -338.1727600097656,
      "y": 1584.863655090332,
      "strokeColor": "#1971c2",
      "backgroundColor": "#c773c7",
      "width": 457.03125,
      "height": 24,
      "seed": 1732303086,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1697551547343,
      "link": "https://www.enterpriseintegrationpatterns.com/ramblings/18_starbucks.html",
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "Starbucks Does Not Use Two-Phase Commit",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Starbucks Does Not Use Two-Phase Commit",
      "lineHeight": 1.2,
      "baseline": 19
    },
    {
      "type": "text",
      "version": 996,
      "versionNonce": 66356669,
      "isDeleted": false,
      "id": "Tk4ciMr_73qHzFVP6pIVO",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 152.82723999023438,
      "y": 1919.863655090332,
      "strokeColor": "#e03131",
      "backgroundColor": "#c773c7",
      "width": 1453.125,
      "height": 240,
      "seed": 668126126,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1697551547345,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "Note: Some commands must be processed synchronously. A user logging in/out is an example.\n      Sometimes you do need to have a meeting. Often it could have been an email (asynchronous)\n      Sometimes you do need to call someone on the phone. Often it could have been a text.\n      Do not confuse asynchronous with being (necessarily) slow. \n      HTTP is not an asynchronous messaging protocol. It is request/response. \n      The ideologies of transactional consistency and HTTP request response make us think things like:\n        - If a user adds a vehicle to their insurance policy, I cannot send a response until it is actually on their policy.\n        - This is confusing \"Creating an Order\" with \"Shipping an Order\"\n        - You can only do those things with local transactions. (because there are no reliable distributed transactions)\n        - Again, the stateless nature of HTTP really seems to highlight this. Make it stateful (web sockets, etc.)",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Note: Some commands must be processed synchronously. A user logging in/out is an example.\n      Sometimes you do need to have a meeting. Often it could have been an email (asynchronous)\n      Sometimes you do need to call someone on the phone. Often it could have been a text.\n      Do not confuse asynchronous with being (necessarily) slow. \n      HTTP is not an asynchronous messaging protocol. It is request/response. \n      The ideologies of transactional consistency and HTTP request response make us think things like:\n        - If a user adds a vehicle to their insurance policy, I cannot send a response until it is actually on their policy.\n        - This is confusing \"Creating an Order\" with \"Shipping an Order\"\n        - You can only do those things with local transactions. (because there are no reliable distributed transactions)\n        - Again, the stateless nature of HTTP really seems to highlight this. Make it stateful (web sockets, etc.)",
      "lineHeight": 1.2,
      "baseline": 235
    },
    {
      "type": "text",
      "version": 151,
      "versionNonce": 1204650131,
      "isDeleted": false,
      "id": "wWNTIrI2hsIgAtRIHiSno",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 1343.8272399902344,
      "y": 1835.863655090332,
      "strokeColor": "#2f9e44",
      "backgroundColor": "#c773c7",
      "width": 362.53973388671875,
      "height": 100,
      "seed": 93328174,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1697551547349,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "\"Ideology are those things\nthat we think are true\nbut are just beliefs\"\n- can't remember where I heard this.",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "\"Ideology are those things\nthat we think are true\nbut are just beliefs\"\n- can't remember where I heard this.",
      "lineHeight": 1.25,
      "baseline": 93
    },
    {
      "type": "text",
      "version": 6592,
      "versionNonce": 104252957,
      "isDeleted": false,
      "id": "dnryTEV89Kt93ADfoslK9",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 113.82723999023438,
      "y": 2215.863655090332,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#c773c7",
      "width": 1593.75,
      "height": 3288,
      "seed": 1618762482,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1697551547361,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "In the ordering scenario above we are saying \"Within my world (bounded context) I'm responsible for users placing orders.\nI need some operands to do that. The customers, some inventory, etc. When an order is placed, my service will OWN that order.\n\nIn other words, some data (operands) that you don't own will end up being operated on to create something you do own.\n\n\nOrderCreated (Operation)\n    - Id: \"d80603ef-fb7c-4416-bab5-7f0a3ba0d997\"\n    - Placed: 2023-10-17 8:24:17 AM\n    - Customer: bob-smith\n    - Items: [ {qty: 3, sku: eggs, price: $2}, {qty: 2, sku: bread, price: $1.50}]\n    - Subtotal: $12\n\n\nWe KNOW that this is going to have to turn into an \"OrderShipped\" (or an error).\n\nWe could issue COMMANDS to other services (remember commands have one handler), wait for some kind of response (Event)\nfrom each one, and that is an \"orchestrator\" and it is super tightly coupled.\n\nThis is where we go back to our policy, which says \"An OrderCreated becomes an OrderShipped When\":\n    - The Order Customer Is Approved (sounds like an event!)\n    - The inventory is reconciled \n    - The shipping is arranged\n    - An OrderId is assigned\n    - Etc. etc.\n\nThis is a \"Saga\" - like Game of Thrones, lots of interweaving story lines, all leading up to a (hopefully better) ending.\n\nWhat is our responsibility as the \"Order taking bounded context\"?\n    - Put an event out there - and trust that eventually we will receive the set of events that mean we can call this an \"Order\".\n\n\nSo we publish an \"OrderCreated\" event, and other services can:\n    - Work on it in parallel. \n    - Work on it sequentially.\n    - Be added in without us knowing.\n\nNote: Sagas are sometimes time constrained. You shouldn't start making the TV show until all the books are written. (forced metaphor).\n\n\nWe let each of the participating services (and we shouldn't know who they are) do their own work and state management.\n- This means that they *each* have at least two handlers.\n    - The \"Local Transaction\"\n        - \"I received this event so I am going to change my state thusly\":\n            - \"I am inventory. When an order is created, I will apply my policies, and if good, update the inventory\"\n            - \"I am the billing service. When an order is created I will charge the customer\"\n            - etc. etc.\n        - To orchestrate/sequence the application of these things, they may not all (and probably won't) respond to the \n          \"OrderCreated\" event. For example, you might decide that we aren't going to adjust inventory until the credit card is charged,\n          or vice-versa. \n            - The Inventory Service listens for a \"CustomerOrderCharged\" event. \n                (keep in mind all of this can and will change and our bounded context does not care. Loose Coupling FTW!)\n    - The \"Compensating Activity\"\n        - If there is a rejection from any of the participating services, each service will have to \"backout\" their local transaction.\n        - \"Dang, I already took the items out of inventory, and just heard (Event) that the credit card company rejected the payment\"\n            - Put it \"back\" in inventory.\n            - Sounds easy, and often is, but what if between when the order was placed and when it was rejected, we had other orders\n              we had to reject because of inadequate inventory?\n                - This is \"computer programming\". \n                - Some Ways To Handle This:\n                    - \"Lock\" the data until you get the go-ahead. Probably not sustainable for Shared data (like inventory) but\n                       for user-associated data, it often is. (e.g. I am in the process of changing this insurance policy by adding a \n                        vehicle. I cannot make any other changes to this until it is approved\")\n                    - Re-sequence processing of events. \n                        - \"I just got an order for more eggs, but this other outstanding order took the last dozen. I should know at\n                          X time if the order completed, I will defer this new order until then\" (this is why sagas have time limits)\n                    - Related: you can just retry X mins/seconds/hours in the future. Read: Amazon cancelling an order.\n\nWhat about \"Consistency\"?\n    - The inventory system gets an OrderCreated, and the prices have changed since the order was placed.\n    - Old Skool Transactional Consistency would say \"FAIL!\"\n    - We can have a \"Policy\" for this, for example:\n        - If the price change is within a certain \"window\", we will honor it. \n            - We'd need to know somehow what version of the price list they are working from. \"Versioned Editions\"\n        - If the price promised on the order is lower than the current price, we will honor it. \n        - If the price change on the order is lower than the current price, AND the customer is a \"VIP\", we will honor it.\n\n\n\n\nVersioned Editions:\n\n\"My local reference data for the product with the SKU 'eggs'\" says they cost $1.99 a dozen.\n\nHow will I get \"updates\" if that is mutable data? \n\nOne way:\n    I get a \"document\" event: \n        On Day 1: \n            Operator: \"InventoryItem\" (weird, huh)\n                Operands:\n                    SKU: 'eggs'\n                    Version: 1\n                    price: 1.99\n        On Day 2:\n            Operator: \"InventoryItem\" (weird, huh)\n                Operands:\n                    SKU: 'eggs'\n                    Version: 2\n                    price: 2.08\n\n\nThe operand for anything having to do with IventoryItems is now a \"composite key\" of the SKU and the Version.\n\nThis can get crazy. These are \"State Carried Messages\" - and don't sound like events. \n    - Note: in Event Streaming (e.g. Kafka) these CAN be in a topic that can be used to \"seed\" services.\n        - Kafka can \"compress\" this topic, because all any \"new\" services would need is the latest version.\n\n\nThese \"Documents\" don't convey any \"intention\", they are just a statement of fact. They can cause a lot of churn.\n\nFor example, we don't care in our application about the \"SupportTech\" property of the \"com.company.software.added\"\nand we sure don't want to have to process that message every time a different support tech is assigned.\n\nSo maybe just do events?\n\nOn Day 1: - we have the \"current\" inventory item. (from a database backup/restore, query, topic, whatever)\nOn Day 2:\n    Operator: InventoryPriceIncreased\n        - SKU: 'eggs'\n        - Version: 2,\n        - increase: .09\n        - newPrice: 2.08\n\n\n        \n\n\n\n\n\n\n\n\n\n\n",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "In the ordering scenario above we are saying \"Within my world (bounded context) I'm responsible for users placing orders.\nI need some operands to do that. The customers, some inventory, etc. When an order is placed, my service will OWN that order.\n\nIn other words, some data (operands) that you don't own will end up being operated on to create something you do own.\n\n\nOrderCreated (Operation)\n    - Id: \"d80603ef-fb7c-4416-bab5-7f0a3ba0d997\"\n    - Placed: 2023-10-17 8:24:17 AM\n    - Customer: bob-smith\n    - Items: [ {qty: 3, sku: eggs, price: $2}, {qty: 2, sku: bread, price: $1.50}]\n    - Subtotal: $12\n\n\nWe KNOW that this is going to have to turn into an \"OrderShipped\" (or an error).\n\nWe could issue COMMANDS to other services (remember commands have one handler), wait for some kind of response (Event)\nfrom each one, and that is an \"orchestrator\" and it is super tightly coupled.\n\nThis is where we go back to our policy, which says \"An OrderCreated becomes an OrderShipped When\":\n    - The Order Customer Is Approved (sounds like an event!)\n    - The inventory is reconciled \n    - The shipping is arranged\n    - An OrderId is assigned\n    - Etc. etc.\n\nThis is a \"Saga\" - like Game of Thrones, lots of interweaving story lines, all leading up to a (hopefully better) ending.\n\nWhat is our responsibility as the \"Order taking bounded context\"?\n    - Put an event out there - and trust that eventually we will receive the set of events that mean we can call this an \"Order\".\n\n\nSo we publish an \"OrderCreated\" event, and other services can:\n    - Work on it in parallel. \n    - Work on it sequentially.\n    - Be added in without us knowing.\n\nNote: Sagas are sometimes time constrained. You shouldn't start making the TV show until all the books are written. (forced metaphor).\n\n\nWe let each of the participating services (and we shouldn't know who they are) do their own work and state management.\n- This means that they *each* have at least two handlers.\n    - The \"Local Transaction\"\n        - \"I received this event so I am going to change my state thusly\":\n            - \"I am inventory. When an order is created, I will apply my policies, and if good, update the inventory\"\n            - \"I am the billing service. When an order is created I will charge the customer\"\n            - etc. etc.\n        - To orchestrate/sequence the application of these things, they may not all (and probably won't) respond to the \n          \"OrderCreated\" event. For example, you might decide that we aren't going to adjust inventory until the credit card is charged,\n          or vice-versa. \n            - The Inventory Service listens for a \"CustomerOrderCharged\" event. \n                (keep in mind all of this can and will change and our bounded context does not care. Loose Coupling FTW!)\n    - The \"Compensating Activity\"\n        - If there is a rejection from any of the participating services, each service will have to \"backout\" their local transaction.\n        - \"Dang, I already took the items out of inventory, and just heard (Event) that the credit card company rejected the payment\"\n            - Put it \"back\" in inventory.\n            - Sounds easy, and often is, but what if between when the order was placed and when it was rejected, we had other orders\n              we had to reject because of inadequate inventory?\n                - This is \"computer programming\". \n                - Some Ways To Handle This:\n                    - \"Lock\" the data until you get the go-ahead. Probably not sustainable for Shared data (like inventory) but\n                       for user-associated data, it often is. (e.g. I am in the process of changing this insurance policy by adding a \n                        vehicle. I cannot make any other changes to this until it is approved\")\n                    - Re-sequence processing of events. \n                        - \"I just got an order for more eggs, but this other outstanding order took the last dozen. I should know at\n                          X time if the order completed, I will defer this new order until then\" (this is why sagas have time limits)\n                    - Related: you can just retry X mins/seconds/hours in the future. Read: Amazon cancelling an order.\n\nWhat about \"Consistency\"?\n    - The inventory system gets an OrderCreated, and the prices have changed since the order was placed.\n    - Old Skool Transactional Consistency would say \"FAIL!\"\n    - We can have a \"Policy\" for this, for example:\n        - If the price change is within a certain \"window\", we will honor it. \n            - We'd need to know somehow what version of the price list they are working from. \"Versioned Editions\"\n        - If the price promised on the order is lower than the current price, we will honor it. \n        - If the price change on the order is lower than the current price, AND the customer is a \"VIP\", we will honor it.\n\n\n\n\nVersioned Editions:\n\n\"My local reference data for the product with the SKU 'eggs'\" says they cost $1.99 a dozen.\n\nHow will I get \"updates\" if that is mutable data? \n\nOne way:\n    I get a \"document\" event: \n        On Day 1: \n            Operator: \"InventoryItem\" (weird, huh)\n                Operands:\n                    SKU: 'eggs'\n                    Version: 1\n                    price: 1.99\n        On Day 2:\n            Operator: \"InventoryItem\" (weird, huh)\n                Operands:\n                    SKU: 'eggs'\n                    Version: 2\n                    price: 2.08\n\n\nThe operand for anything having to do with IventoryItems is now a \"composite key\" of the SKU and the Version.\n\nThis can get crazy. These are \"State Carried Messages\" - and don't sound like events. \n    - Note: in Event Streaming (e.g. Kafka) these CAN be in a topic that can be used to \"seed\" services.\n        - Kafka can \"compress\" this topic, because all any \"new\" services would need is the latest version.\n\n\nThese \"Documents\" don't convey any \"intention\", they are just a statement of fact. They can cause a lot of churn.\n\nFor example, we don't care in our application about the \"SupportTech\" property of the \"com.company.software.added\"\nand we sure don't want to have to process that message every time a different support tech is assigned.\n\nSo maybe just do events?\n\nOn Day 1: - we have the \"current\" inventory item. (from a database backup/restore, query, topic, whatever)\nOn Day 2:\n    Operator: InventoryPriceIncreased\n        - SKU: 'eggs'\n        - Version: 2,\n        - increase: .09\n        - newPrice: 2.08\n\n\n        \n\n\n\n\n\n\n\n\n\n\n",
      "lineHeight": 1.2,
      "baseline": 3283
    },
    {
      "id": "WsiHnZUbSlP5qtf9MnXIQ",
      "type": "text",
      "x": -728.1727600097656,
      "y": -75.13634490966797,
      "width": 1007.4393920898438,
      "height": 200,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 1161961683,
      "version": 123,
      "versionNonce": 70989373,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1697552328029,
      "link": null,
      "locked": false,
      "text": "[10:10 AM] Denis J O'Connell\n\nJust a terminology clarification.\n\nIn our training class, would you refer to\n\n1.) The Portal Solution as a microservice and the Software Center Solution as a microservice or\n\n2.) The Portal Solution and Software Center solutions are applications that adhere to a microservice software architecture\\\n    - jeff';s answer - I think 2 is more appropriate.",
      "fontSize": 16,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 194,
      "containerId": null,
      "originalText": "[10:10 AM] Denis J O'Connell\n\nJust a terminology clarification.\n\nIn our training class, would you refer to\n\n1.) The Portal Solution as a microservice and the Software Center Solution as a microservice or\n\n2.) The Portal Solution and Software Center solutions are applications that adhere to a microservice software architecture\\\n    - jeff';s answer - I think 2 is more appropriate.",
      "lineHeight": 1.25
    },
    {
      "id": "0KUplQkXw1nqvxtsnWxxo",
      "type": "rectangle",
      "x": 1725.8272399902344,
      "y": 125.36365509033203,
      "width": 269,
      "height": 205,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "seed": 1360405341,
      "version": 11,
      "versionNonce": 415826717,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1697552504124,
      "link": null,
      "locked": false
    },
    {
      "id": "Ln1KV9yWNQh0aC42T93xS",
      "type": "arrow",
      "x": 1509.8272399902344,
      "y": 218.36365509033203,
      "width": 183,
      "height": 0,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "seed": 2052364157,
      "version": 27,
      "versionNonce": 142143347,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1697552513278,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          183,
          0
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": null,
      "endBinding": null,
      "startArrowhead": null,
      "endArrowhead": "arrow"
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}